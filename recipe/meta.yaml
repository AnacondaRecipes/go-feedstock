{% set name = "go" %}
{% set version = "1.18" %}

package:
  name: {{ name }}-{{ go_variant_str }}
  version: {{ version }}

source:
  - folder: go
    url: https://dl.google.com/{{ name }}/go{{ version }}.src.tar.gz
    sha256: 38f423db4cc834883f2b52344282fa7a39fbb93650dc62a11fdf0be6409bdad6
    patches:
      # Please see patches/README.md for more details
      - patches/0001-issue10607-is-only-valid-when-running-with-CGO.patch
      - patches/0002-Fix-cgo_fortran-test-setup-for-conda.patch
      - patches/0003-Add-CC-C-CPP-LD-FLAGS-to-script_test-extraEnvKeys.patch
      - patches/0004-Inherit-CGO_-environment-variables.patch
      - patches/0005-Add-conda-aware-default-values-for-GOPATH-and-GOBIN.patch
      - patches/0006-cmd-link-internal-ld-disable-testWindowsBuildmodeCSh.patch
      - patches/1000-gh46145-fix-TestSetuidEtc-in-containers.patch
      # Skip certain tests that fail when run on the build workers used for the
      # Anaconda "defaults" channels; these tests pass when `conda build`-ing
      # this recipe in other contexts, so we're reasonably confident that it's
      # due to configuration quirks in the build workers themselves, rather
      # than any flaw in the recipe or the upstream code.  NOTE: These patches
      # should be re-evaluated when re-building and/or updating this recipe.
      - patches/1100-skip-tests-on-defaults-osx64-workers.patch                   # [osx]
      - patches/1100-skip-tests-on-defaults-win64-workers.patch                   # [win]
  - folder: go-bootstrap
    url: https://dl.google.com/go/go{{ go_bootstrap_ver }}.linux-amd64.tar.gz     # [x86_64 and linux]
    sha256: 38f423db4cc834883f2b52344282fa7a39fbb93650dc62a11fdf0be6409bdad6      # [x86_64 and linux]
    url: https://dl.google.com/go/go{{ go_bootstrap_ver }}.darwin-amd64.tar.gz    # [x86_64 and osx]
    sha256: 38f423db4cc834883f2b52344282fa7a39fbb93650dc62a11fdf0be6409bdad6      # [x86_64 and osx]
    url: https://dl.google.com/go/go{{ go_bootstrap_ver }}.windows-amd64.zip      # [x86_64 and win]
    sha256: 38f423db4cc834883f2b52344282fa7a39fbb93650dc62a11fdf0be6409bdad6      # [x86_64 and win]
    url: https://dl.google.com/go/go{{ go_bootstrap_ver }}.linux-arm64.tar.gz     # [aarch64]
    sha256: 38f423db4cc834883f2b52344282fa7a39fbb93650dc62a11fdf0be6409bdad6      # [aarch64]
    url: https://dl.google.com/go/go{{ go_bootstrap_ver }}.linux-ppc64le.tar.gz   # [ppc64le]
    sha256: 38f423db4cc834883f2b52344282fa7a39fbb93650dc62a11fdf0be6409bdad6      # [ppc64le]

build:
  skip: True    # [win32 or linux32]
  binary_relocation: false
  detect_binary_files_with_prefix: false
  force_ignore_keys:    # [win]
    - c_compiler        # [win]
    - cxx_compiler      # [win]
    - fortran_compiler  # [win]
  # test data links to these DSOs
  missing_dso_whitelist:
    - '**/libc.so.6'               # [linux]
    - /usr/lib/libSystem.B.dylib   # [osx]
    - $SYSROOT\System32\winmm.dll  # [win]
  number: 0

requirements:
  build:
    - patch     # [unix]
    - m2-patch  # [win]
  run:
    - {{ pin_subpackage(name, exact=true) }}
    - {{ compiler('c') }}         # [unix and cgo]
    - {{ compiler('m2w64_c') }}   # [win and cgo]

test:
  commands:
    - go help

outputs:
  - name: {{ name }}
    script: {{ go_variant_str }}/build.sh  # [unix]
    script: {{ go_variant_str }}/build.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}        # [unix and cgo]
        - {{ compiler('cxx') }}      # [unix and cgo]
        - {{ compiler('fortran') }}  # [unix and cgo]

        - {{ compiler('m2w64_c') }}        # [win and cgo]
        - {{ compiler('m2w64_cxx') }}      # [win and cgo]
        - {{ compiler('m2w64_fortran') }}  # [win and cgo]
      run:
        - _go_select =={{ go_variant_ver }}={{ go_variant_str }}
      run_constrained:
        # TODO: Move to run section once conda/conda#9845 is fixed
        - __osx >={{ MACOSX_DEPLOYMENT_TARGET }}  # [osx]

        - {{ pin_compatible(compiler('c')) }}        # [unix and cgo]
        - {{ pin_compatible(compiler('cxx')) }}      # [unix and cgo]
        - {{ pin_compatible(compiler('fortran')) }}  # [unix and cgo]

        - {{ pin_compatible(compiler('m2w64_c')) }}        # [win and cgo]
        - {{ pin_compatible(compiler('m2w64_cxx')) }}      # [win and cgo]
        - {{ pin_compatible(compiler('m2w64_fortran')) }}  # [win and cgo]
    test:
      requires:
        - {{ compiler('c') }}         # [unix and cgo]
        - {{ compiler('m2w64_c') }}   # [win and cgo]
        - git  # [linux]
        - perl
      script: {{ go_variant_str }}/test.sh  # [unix]
      script: {{ go_variant_str }}/test.bat  # [win]
    about:
      home: http://golang.org
      license: BSD-3-Clause
      license_family: BSD
      license_file: go/LICENSE
      summary: The Go Programming Language

  - name: {{ name }}-{{ go_variant_str }}_{{ target_platform }}
    script: compiler/build.sh  # [unix]
    script: compiler/build.bat  # [win]
    requirements:
      run:
        # Do this rather than `pin_subpackage(name, exact=True)` so targeting
        # CGO to more than one version of a platform's C/C++/Fortran compilers
        # is possible; an exact subpackage pin would (arbitrarily) select one
        # version of the C/C++/Fortran compilers, and attempting to use other
        # versions would result in unresolvable environment errors.  This would
        # (likely) not be an issue if we addressed conda/conda-build#4142.
        - {{ pin_subpackage(name, max_pin='x.x.x.x') }}
        - _go_select  =={{ go_variant_ver }}={{ go_variant_str }}
    #TODO: Re-enable once conda/conda#9845 if fixed.
    #run_exports:   # [osx]
    #  strong:                                     # [osx]
    #    - __osx >={{ MACOSX_DEPLOYMENT_TARGET }}  # [osx]
    test:
      script: compiler/test.sh  # [unix]
      script: compiler/test.bat  # [win]
    about:
      home: http://golang.org
      license: BSD-3-Clause
      license_family: BSD
      license_file: go/LICENSE
      summary: The Go ({{ go_variant_str }}) compiler activation scripts for conda-build.
      description: |
        This package enables the CONDA_GO_COMPILER environment variable. 
        This variable is used by conda-forge's patched GoLang compiler to 
        set conda-aware GOBIN and GOPATH default values. These default 
        values are ignored if GOBIN and GOPATH environment variables 
        are set independently by the user.

        For more details, please see the go-feedstock recipe.
      dev_url: https://github.com/conda-forge/go-feedstock

about:
  home: http://golang.org
  license: BSD-3-Clause
  license_family: BSD
  license_file: go/LICENSE
  summary: The Go Programming Language ({{ go_variant_str }})
  description: |
    Go is expressive, concise, clean, and efficient. Its concurrency mechanisms
    make it easy to write programs that get the most out of multicore and
    networked machines, while its novel type system enables flexible and
    modular program construction. Go compiles quickly to machine code yet has
    the convenience of garbage collection and the power of run-time reflection.
    It's a fast, statically typed, compiled language that feels like a
    dynamically typed, interpreted language.
  doc_url: https://golang.org/doc
  dev_url: https://go.googlesource.com/go

extra:
  recipe-maintainers:
    - nehaljwani
    - scopatz
    - sodre
    - stuarteberg
    - chenghlee
